Adding Facebook Authentication in Ruby on Rails

Following guide available at:
[https://richonrails.com/articles/facebook-authentication-in-ruby-on-rails]
Also following:
[https://coderwall.com/p/bsfitw/ruby-on-rails-4-authentication-with-facebook-and-omniauth]

Step 1.1 Set up an app on Facebook.

  [http://developers.facebook.com/apps]

  Create a new app giving it a unique name and namespace. 
  Note the application ID and secret. 
  Enter a site URL: 
  http://localhost:3000/

  When deploying to production the following must be done:
    Set the site URL to the actual URL
    Set the Privacy Policy URL
    Set the Terms of Service URL
    Disable development(sandbox) mode (under app review)

Step 1.2 Set up an app on Twitter.
  
  [https://apps.twitter.com/]    
  
  Create and app giving it a name and description.
  Set the callback to:
  http://127.0.0.1:3000/auth/twitter/callback
  Note the Consumer Key and Secret.

Step 2. Configure omniauth in Rails.

  Add the omniauth-facebook gem to the Gemfile. 
    gem 'omniauth' # not necessary if using derivatives
    gem 'omniauth-facebook'
    gem 'omniauth-twitter'
    bundle install
    
  Create an initializer to store omniauth provider info.
  config/initializers/omniauth.rb:
    OmniAuth.config.logger = Rails.logger
    
    Rails.application.config.middleware.use OmniAuth::Builder do
      provider :facebook, 'AppID', 'AppSecret', 
        {:client_options => {:ssl => {:ca_file => Rails.root.join("cacert.pem").to_s}}},
        scope: 'public_profile, email',
        display: 'popup' # page/popup/touch 
        provider :twitter, 'CONSUMER_KEY', 'CONSUMER_SECRET'
      # provider :linked_in, 'CONSUMER_KEY', 'CONSUMER_SECRET'
    end

  Note: the {options} may not be necessary in the above method. 
  Replace 'AppID' and 'AppSecret' with the actual values.
  On many systems SSL certificates can't be found which leads to an error.
  To resolve this, download [https://curl.haxx.se/ca/cacert.pem],
  and place it in the rails app root folder.
  

Step 3. Create a User model to store user info from Facebook.

  rails g model user provider uid name email oath_token oauth_expires_at:datetime
  rake db:migrate
  
  Modify app/models/user.rb:
    class User < ActiveRecord::Base
      def self.from_omniauth(auth)
        where(provider: auth.provider, uid: auth.uid).first_or_create do |user|
          user.provider     = auth.provider
          user.uid          = auth.uid
          user.name         = auth.info.name
          user.oauth_token  = auth.credentials.token
          user.oauth_expires_at = Time.at(auth.credentials.expires_at)
        end
      end
    end
    
  The above code takes data returned by Facebook and updates/creates
  a user as necessary. 
  
Step 3 (alternative) Create User and Authorizations models.

  rails generate model User name:string email:string
  rails generate model Authorization provider:string uid:string user_id:integer
  rake db:migrate
  
  Modify app/models/user.rb:
    class User < ActiveRecord::Base
      has_many :authorizations
      validates :name, :email, :presence => true
      # email may not be possible with Twitter
      
      def add_provider(auth)
        unless authorizations.find_by_provider_and_uid(auth["provider"], auth["uid"])
          Authorization.create :user => self, :provider => auth["provider"], :uid => auth["uid"]
        end
      end
    end
    
  Modify app/models/authorization.rb:
    class Authorization < ActiveRecord::Base
      belongs_to :user
      validates :provider, :uid, :presence => true
      
      def self.find_or_create(auth_hash)
        unless auth = find_by_provider_and_uid(auth_hash["provider"],auth_hash["uid"])
          user = User.create :name => auth_hash["user_info"]["name"],
            :email => auth_hash["user_info"]["email"]
          auth = create :user => user, :provider => auth_hash["provider"], :uid => auth_hash["uid"]
        end
        
        auth
      end
    end

Step 4. Add Home and Sessions controllers.

  rails g controller home show
  rails g controller Sessions create destroy
  
  Modify app/controllers/sessions_controller.rb:
    class SessionsController < ApplicationController
      # logging in
      def create
        user = User.from_omniauth(auth_hash])
        session[:user_id] = user.id
        redirect_to root_path
        # Alternative (to see data returned by provider):
        # render :text => auth_hash.inspect
      end
      # with authorizations
      def create
        if session[:user_id]
          # Means user is signed in. Add authorization to the user.
          User.find(session[:user_id]).add_provider(auth_hash)
          render :text => "You can now login using #{auth_hash["provider"].capitalize} too!"
        else
          # Log in or sign up
          auth = Authorization.find_or_create(auth_hash)
          session[:user_id] = auth.user.id
          render :text => "Welcome #{auth.user.name}!"
        end
      end
      
      # logging out
      def destroy
        session[:user_id] = nil
        redirect_to root_path
        # render :text => "You've logged out!"
      end
      
      def failure
        render :text => "Sorry, but you didn't allow access to your app!"
      end
      protected
      def auth_hash
        request.env['omniauth.auth']
      end
    end

Step 5. Configure Routes.

  Modify config/routes.rb:
    FacebookAuthExample::Application.routes.draw do
      # link omniauth callback to sessions controller
      get '/login', :to => 'sessions#new', :as => :login
      get 'auth/:provider/callback', to: 'sessions#create'
      # match 'auth/:provider/callback', to: 'sessions#create', via: [:get, :post]
      
      # error handling in case of log-in failure
      get 'auth/failure', to: redirect('/')
      # match 'auth/failure', to: 'sessions#failure', via: [:get, :post]
      # match 'auth/failure', to: redirect('/'), via: [:get, :post]
      
      # allow user to log-out
      get 'signout', to: 'sessions#destroy', as: 'signout'
      # match 'signout', to: 'sessions#destroy', as: 'signout', via: [:get, :post]
      
      resources :sessions, only: [:create, :destroy]
      resource :home, only: [:show]
      
      root to: "home#show"
    end
  
  
Step 6. Configure Application controller.

  Modify app/controllers/application_controller.rb:
    class ApplicationController < ActionController::Base
      protect_from_forgery with: :exception
      
      helper_method :current_user
      
      private
      def current_user
        @current_user ||= User.find(session[:user_id]) if session[:user_id]
      end
    end
    
  This code checks whether a user is logged in or not.
  The helper method tries to look up the user,
  by the user id stored in the session. 
  
  
Step 7. Add log-in/log-out links to the application layout.

  Modify app/views/layouts/application.html.erb:
    <!DOCTYPE html>
    <html>
      <head>
        <title>Facebook Auth Example</title>
        ..
      </head>
      <body>
        <div id="user-widget">
          <% if current_user %>
            Signed in as <strong><%= current_user.name %></strong>!
            <%= link_to "Sign Out", signout_path, id: "sign_out" %>
          <% else %>
            <%= link_to "Sign in with Facebook", "/auth/facebook", id: "sign_in" %>
          <% end %>
        </div>
        <%= yield %>
      </body>
    </html>
    
       
END.
//////////////////////////////////////////////////////////////////////




